// <auto-generated />
using System;
using BookstoreApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookstoreApplication.Migrations
{
    [DbContext(typeof(BookstoreContext))]
    [Migration("20250918160658_v3")]
    partial class v3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookstoreApplication.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Birthday");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Pisac iz Srbije",
                            DateOfBirth = new DateTime(1998, 5, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Ana Radmanović"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Romantični pisac",
                            DateOfBirth = new DateTime(1985, 8, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Marko Jovanović"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Pisac naučne fantastike",
                            DateOfBirth = new DateTime(1990, 3, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Jelena Petrović"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Poezija i proza",
                            DateOfBirth = new DateTime(1975, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Nikola Stojanović"
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Mladi pisac",
                            DateOfBirth = new DateTime(2000, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Marija Ilić"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.AuthorAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("AwardId")
                        .HasColumnType("integer");

                    b.Property<int>("YearAwarded")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("AwardId");

                    b.ToTable("AuthorAwardBridge", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            AwardId = 1,
                            YearAwarded = 2020
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            AwardId = 2,
                            YearAwarded = 2021
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            AwardId = 1,
                            YearAwarded = 2019
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            AwardId = 3,
                            YearAwarded = 2020
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            AwardId = 2,
                            YearAwarded = 2021
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            AwardId = 4,
                            YearAwarded = 2022
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 4,
                            AwardId = 1,
                            YearAwarded = 2018
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            AwardId = 3,
                            YearAwarded = 2019
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 5,
                            AwardId = 2,
                            YearAwarded = 2020
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 5,
                            AwardId = 4,
                            YearAwarded = 2021
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 1,
                            AwardId = 3,
                            YearAwarded = 2022
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 2,
                            AwardId = 4,
                            YearAwarded = 2022
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 3,
                            AwardId = 1,
                            YearAwarded = 2020
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 4,
                            AwardId = 2,
                            YearAwarded = 2021
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 5,
                            AwardId = 3,
                            YearAwarded = 2022
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearEstablished")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Awards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Prva nagrada",
                            Name = "Nagrada 1",
                            YearEstablished = 2000
                        },
                        new
                        {
                            Id = 2,
                            Description = "Druga nagrada",
                            Name = "Nagrada 2",
                            YearEstablished = 2005
                        },
                        new
                        {
                            Id = 3,
                            Description = "Treća nagrada",
                            Name = "Nagrada 3",
                            YearEstablished = 2010
                        },
                        new
                        {
                            Id = 4,
                            Description = "Četvrta nagrada",
                            Name = "Nagrada 4",
                            YearEstablished = 2015
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            ISBN = "111111",
                            PageCount = 200,
                            PublishedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Knjiga 1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            ISBN = "222222",
                            PageCount = 150,
                            PublishedDate = new DateTime(2019, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Knjiga 2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            ISBN = "333333",
                            PageCount = 300,
                            PublishedDate = new DateTime(2018, 7, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Knjiga 3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            ISBN = "444444",
                            PageCount = 120,
                            PublishedDate = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Knjiga 4"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            ISBN = "555555",
                            PageCount = 250,
                            PublishedDate = new DateTime(2017, 11, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Knjiga 5"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            ISBN = "666666",
                            PageCount = 180,
                            PublishedDate = new DateTime(2022, 6, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Knjiga 6"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 4,
                            ISBN = "777777",
                            PageCount = 220,
                            PublishedDate = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Knjiga 7"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            ISBN = "888888",
                            PageCount = 260,
                            PublishedDate = new DateTime(2019, 8, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Knjiga 8"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 5,
                            ISBN = "999999",
                            PageCount = 140,
                            PublishedDate = new DateTime(2021, 2, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Knjiga 9"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 5,
                            ISBN = "101010",
                            PageCount = 300,
                            PublishedDate = new DateTime(2022, 9, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Knjiga 10"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 1,
                            ISBN = "111212",
                            PageCount = 210,
                            PublishedDate = new DateTime(2018, 4, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Knjiga 11"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 2,
                            ISBN = "121212",
                            PageCount = 190,
                            PublishedDate = new DateTime(2021, 7, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Knjiga 12"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Beograd",
                            Name = "Laguna",
                            Website = "https://laguna.rs"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Beograd",
                            Name = "Vulkan",
                            Website = "https://vulkan.rs"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Beograd",
                            Name = "Dereta",
                            Website = "https://dereta.rs"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.AuthorAward", b =>
                {
                    b.HasOne("BookstoreApplication.Models.Author", "Author")
                        .WithMany("AuthorAwards")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreApplication.Models.Award", "Award")
                        .WithMany("AuthorAwards")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Award");
                });

            modelBuilder.Entity("BookstoreApplication.Models.Book", b =>
                {
                    b.HasOne("BookstoreApplication.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreApplication.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookstoreApplication.Models.Author", b =>
                {
                    b.Navigation("AuthorAwards");
                });

            modelBuilder.Entity("BookstoreApplication.Models.Award", b =>
                {
                    b.Navigation("AuthorAwards");
                });
#pragma warning restore 612, 618
        }
    }
}
